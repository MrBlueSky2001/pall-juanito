class EditarDireccionView(LoginRequiredMixin, UpdateView):
    redirect_field_name = "/tienda/login/"
    model = Direccion
    form_class = DireccionesForm
    template_name = 'tienda/direcciones.html'
    success_url = reverse_lazy('perfil_cliente')

    def get(self, request, *args, **kwargs):
        direccion, created = Direccion.objects.get_or_create(user=request.user)
        form = DireccionesForm(instance=direccion)
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        # Obtener el perfil del cliente actual o crear uno nuevo si no existe
        direccion, created = Direccion.objects.get_or_create(user=request.user)
        form = DireccionesForm(request.POST, instance=direccion)
        if form.is_valid():
            form.save()
            return redirect('menu')
        return render(request, self.template_name, {'form': form})


class EditarTarjetaView(LoginRequiredMixin, UpdateView):
    edirect_field_name = "/tienda/login/"
    model = Tarjeta
    form_class = TarjetasForm
    template_name = 'tienda/tarjetas.html'
    success_url = reverse_lazy('perfil_cliente')

    def get(self, request, *args, **kwargs):
        tarjeta, created = Tarjeta.objects.get_or_create(user=request.user)
        form = TarjetasForm(instance=tarjeta)
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        tarjeta, created = Tarjeta.objects.get_or_create(user=request.user)
        form = TarjetasForm(request.POST, instance=tarjeta)
        if form.is_valid():
            form.save()
            return redirect('menu')
        return render(request, self.template_name, {'form': form})


class EditarGeneralView(LoginRequiredMixin, UpdateView):
    redirect_field_name = "/tienda/login/"
    model = ClienteForm
    form_class = ClienteForm
    template_name = 'tienda/perfil.html'
    success_url = reverse_lazy('perfil_cliente')

    def get(self, request, *args, **kwargs):
        cliente, created = Cliente.objects.get_or_create(user=request.user)
        form = ClienteForm(instance=cliente)
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        cliente, created = Cliente.objects.get_or_create(user=request.user)
        form = ClienteForm(request.POST, instance=cliente)
        if form.is_valid():
            form.save()
            return redirect('menu')
        return render(request, self.template_name, {'form': form})


class menuPerfil(TemplateView):
    template_name = 'tienda/menu.html'
templates.html
{% extends 'tienda/base.html' %}

{% block content %}
    <center>
        <br>
        <h2>Editar Tarjetas</h2>
            <div class="perfil">
                <form method="post">
                    {% csrf_token %}
                    {{ form.as_p }}
                    <button type="submit">Guardar cambios</button>
                </form>
                <a href="{% url 'welcome' %}">Volver al inicio</a>
            </div>

    </center>
{% endblock %}
{% extends 'tienda/base.html' %}

{% block content %}
    <center>
        <br>
        <h2>Editar Direcciones</h2>
            <div class="perfil">
                <form method="post">
                    {% csrf_token %}
                    {{ form.as_p }}
                    <button type="submit">Guardar cambios</button>
                </form>
                <a href="{% url 'welcome' %}">Volver al inicio</a>
            </div>

    </center>
{% endblock %}
{% extends 'tienda/base.html' %}

{% block content %}
    <center>
        <br>
        <h2>Editar Perfil</h2>
            <div class="perfil">
                <form method="post">
                    {% csrf_token %}
                    {{ form.as_p }}
                    <button type="submit">Guardar cambios</button>
                </form>
                <a href="{% url 'welcome' %}">Volver al inicio</a>
            </div>
    </center>
{% endblock %}
 model.py
class Direccion(models.Model):
    direccion_envio = models.TextField(blank=True, null=True)
    direccion_facturacion = models.TextField(blank=True, null=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    def __str__(self):
        return self.user.username

    class Meta:
        verbose_name_plural = "Direcciones"


class Tarjeta(models.Model):
    nombre_tarjeta = models.CharField(max_length=40, blank=True, null=True)
    TIPO_TARJETA_CHOICES = [
        ('VISA', 'Visa'),
        ('MASTERCARD', 'Mastercard'),
    ]
    tipo_tarjeta = models.CharField(max_length=20, choices=TIPO_TARJETA_CHOICES, blank=True, null=True)
    titular_tarjeta = models.CharField(max_length=40, blank=True, null=True)
    caducidad_tarjeta = models.DateField(blank=True, null=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    def __str__(self):
        return self.user.username

    class Meta:
        verbose_name_plural = "Tarjetas"

class DireccionesForm(forms.ModelForm):
    class Meta:
        model = Direccion
        fields = ['direccion_envio', 'direccion_facturacion']


class TarjetasForm(forms.ModelForm):
    class Meta:
        model = Tarjeta
        fields = ['nombre_tarjeta', 'tipo_tarjeta', 'titular_tarjeta', 'caducidad_tarjeta']